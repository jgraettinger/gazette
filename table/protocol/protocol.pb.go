// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table/protocol/protocol.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protocol "go.gazette.dev/core/broker/protocol"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SchemaSpec struct {
	Namespace   Namespace                     `protobuf:"bytes,1,opt,name=namespace,proto3,casttype=Namespace" json:"namespace,omitempty"`
	Descriptors *descriptor.FileDescriptorSet `protobuf:"bytes,2,opt,name=descriptors,proto3" json:"descriptors,omitempty"`
}

func (m *SchemaSpec) Reset()         { *m = SchemaSpec{} }
func (m *SchemaSpec) String() string { return proto.CompactTextString(m) }
func (*SchemaSpec) ProtoMessage()    {}
func (*SchemaSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c049facc0b9aaf8, []int{0}
}
func (m *SchemaSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaSpec.Unmarshal(m, b)
}
func (m *SchemaSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaSpec.Marshal(b, m, deterministic)
}
func (m *SchemaSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaSpec.Merge(m, src)
}
func (m *SchemaSpec) XXX_Size() int {
	return xxx_messageInfo_SchemaSpec.Size(m)
}
func (m *SchemaSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaSpec proto.InternalMessageInfo

type TableSpec struct {
	// Name of the table, including namespace components.
	// Eg, "my/name/space/my-table-name".
	Name Table `protobuf:"bytes,1,opt,name=name,proto3,casttype=Table" json:"name,omitempty" yaml:",omitempty"`
	// User-defined labels of this TableSpec. Two label names are reserved
	// and may not be used within a TableSpec's Labels: "name" and "namespace".
	protocol.LabelSet `protobuf:"bytes,2,opt,name=labels,proto3,embedded=labels" json:"labels" yaml:",omitempty,inline"`
	// Name of the DescriptorProto which defines this table's structure,
	// in a Schema which either shares or parents this table's namespace.
	DescriptorName string `protobuf:"bytes,3,opt,name=descriptor_name,json=descriptorName,proto3" json:"descriptor_name,omitempty"`
	// Maximum number of table partitions which will be automatically created.
	// Beyond this limit, table rows not matching a current partition will be
	// rejected. Additional partitions may still be created manually.
	// If zero, all partitions must be manually created.
	MaxPartitionsToAutoCreate int32 `protobuf:"varint,4,opt,name=max_partitions_to_auto_create,json=maxPartitionsToAutoCreate,proto3" json:"max_partitions_to_auto_create,omitempty"`
}

func (m *TableSpec) Reset()         { *m = TableSpec{} }
func (m *TableSpec) String() string { return proto.CompactTextString(m) }
func (*TableSpec) ProtoMessage()    {}
func (*TableSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c049facc0b9aaf8, []int{1}
}
func (m *TableSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableSpec.Merge(m, src)
}
func (m *TableSpec) XXX_Size() int {
	return m.ProtoSize()
}
func (m *TableSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TableSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TableSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SchemaSpec)(nil), "table.SchemaSpec")
	proto.RegisterType((*TableSpec)(nil), "table.TableSpec")
}

func init() { proto.RegisterFile("table/protocol/protocol.proto", fileDescriptor_5c049facc0b9aaf8) }

var fileDescriptor_5c049facc0b9aaf8 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0xeb, 0x76, 0x21, 0xb3, 0xfe, 0xc0, 0xe0, 0x21, 0x2e, 0x6c, 0x26, 0x04, 0xc1,
	0x82, 0x4b, 0x02, 0xab, 0xa7, 0x3d, 0x69, 0x5d, 0x3c, 0x89, 0x94, 0xa4, 0x27, 0x2f, 0x61, 0x92,
	0x3e, 0x63, 0x30, 0xc9, 0x0b, 0x93, 0xa9, 0xb4, 0x5e, 0xbc, 0x8a, 0xa7, 0xfe, 0x0b, 0xfd, 0x6f,
	0x7a, 0xec, 0xd1, 0x53, 0x50, 0xfa, 0x1f, 0xf4, 0xd8, 0x93, 0x64, 0xda, 0x24, 0x2a, 0x78, 0xfb,
	0xf2, 0x7d, 0xdf, 0xf7, 0xde, 0x67, 0x1e, 0x43, 0x2f, 0x25, 0x8f, 0x32, 0xf0, 0x4a, 0x81, 0x12,
	0x63, 0xcc, 0x3a, 0xe1, 0x2a, 0x61, 0x0c, 0x54, 0xf9, 0xc2, 0x8a, 0x04, 0x7e, 0x02, 0xf1, 0xbf,
	0xd8, 0x85, 0x9d, 0x20, 0x26, 0xed, 0x98, 0x68, 0xf6, 0xc1, 0x9b, 0x42, 0x15, 0x8b, 0xb4, 0x94,
	0x28, 0x8e, 0x89, 0x47, 0x09, 0x26, 0xa8, 0xa4, 0xd7, 0xa8, 0x83, 0xeb, 0x7c, 0xa5, 0x34, 0x88,
	0x3f, 0x42, 0xce, 0x83, 0x12, 0x62, 0xe3, 0x19, 0xd5, 0x0b, 0x9e, 0x43, 0x55, 0xf2, 0x18, 0x4c,
	0x62, 0x93, 0xa1, 0x3e, 0xba, 0xb7, 0xaf, 0x99, 0xfe, 0xae, 0x35, 0xfd, 0xbe, 0x6e, 0xdc, 0xd2,
	0xf3, 0x7e, 0x49, 0x65, 0x9e, 0xd8, 0x64, 0x78, 0x7e, 0xed, 0xb8, 0x07, 0x10, 0xb7, 0x05, 0x71,
	0xdf, 0xa4, 0x19, 0xdc, 0x76, 0xb9, 0x00, 0xa4, 0xff, 0x67, 0x9b, 0xf3, 0xfd, 0x84, 0xea, 0x93,
	0xe6, 0x89, 0x0a, 0xe0, 0x9a, 0x9e, 0x36, 0x0b, 0x8e, 0xbb, 0xad, 0x5d, 0xcd, 0x1e, 0x2e, 0x78,
	0x9e, 0xdd, 0x38, 0x57, 0x98, 0xa7, 0x12, 0xf2, 0x52, 0x2e, 0x9c, 0x7d, 0xcd, 0x06, 0xaa, 0xc3,
	0x57, 0x59, 0x63, 0x4c, 0xcf, 0x32, 0x1e, 0x41, 0xd6, 0x22, 0x18, 0x6e, 0x77, 0x9b, 0xb7, 0x8d,
	0x1f, 0x80, 0x1c, 0x3d, 0x59, 0xd7, 0x4c, 0xdb, 0xd4, 0x8c, 0xec, 0x6a, 0x66, 0xfe, 0x3b, 0xf1,
	0x2a, 0x2d, 0xb2, 0xb4, 0x00, 0xc7, 0x3f, 0xce, 0x31, 0x9e, 0xd2, 0x07, 0x3d, 0x62, 0xa8, 0x80,
	0xee, 0x34, 0x40, 0xfe, 0xfd, 0xde, 0x6e, 0x4e, 0x62, 0xbc, 0xa4, 0x97, 0x39, 0x9f, 0x87, 0x25,
	0x17, 0x32, 0x95, 0x29, 0x16, 0x55, 0x28, 0x31, 0xe4, 0x33, 0x89, 0x61, 0x2c, 0x80, 0x4b, 0x30,
	0x4f, 0x6d, 0x32, 0x1c, 0xf8, 0x8f, 0x73, 0x3e, 0x1f, 0x77, 0x99, 0x09, 0xbe, 0x9a, 0x49, 0x7c,
	0xad, 0x02, 0x37, 0x77, 0xbf, 0xad, 0x18, 0x59, 0xae, 0x18, 0xf9, 0xb9, 0x62, 0x64, 0xf4, 0x62,
	0xfd, 0xcb, 0xd2, 0x96, 0x5b, 0x4b, 0xdb, 0x6c, 0x2d, 0xed, 0xc7, 0xd6, 0xd2, 0xde, 0x3b, 0x09,
	0xba, 0x09, 0xff, 0x02, 0x52, 0x82, 0x3b, 0x85, 0xcf, 0x5e, 0x8c, 0x02, 0xbc, 0xbf, 0x7f, 0x4c,
	0x74, 0xa6, 0xd4, 0xf3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0x25, 0xf0, 0xc4, 0x4a, 0x02,
	0x00, 0x00,
}

func (m *TableSpec) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.LabelSet.ProtoSize()))
	n1, err := m.LabelSet.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.DescriptorName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.DescriptorName)))
		i += copy(dAtA[i:], m.DescriptorName)
	}
	if m.MaxPartitionsToAutoCreate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.MaxPartitionsToAutoCreate))
	}
	return i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableSpec) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = m.LabelSet.ProtoSize()
	n += 1 + l + sovProtocol(uint64(l))
	l = len(m.DescriptorName)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MaxPartitionsToAutoCreate != 0 {
		n += 1 + sovProtocol(uint64(m.MaxPartitionsToAutoCreate))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = Table(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LabelSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPartitionsToAutoCreate", wireType)
			}
			m.MaxPartitionsToAutoCreate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPartitionsToAutoCreate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProtocol
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)
