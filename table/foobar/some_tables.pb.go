// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table/foobar/some_tables.proto

package main

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	ddl "go.gazette.dev/core/table/ddl"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GithubEvent struct {
	Id                   int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Actor                *GithubEvent_Actor `protobuf:"bytes,3,opt,name=actor,proto3" json:"actor,omitempty"`
	Org                  *GithubEvent_Actor `protobuf:"bytes,4,opt,name=org,proto3" json:"org,omitempty"`
	Repo                 *GithubEvent_Repo  `protobuf:"bytes,5,opt,name=repo,proto3" json:"repo,omitempty"`
	Payload              *types.Struct      `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	CreatedAt            *types.Timestamp   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Record               *ddl.Record        `protobuf:"bytes,86753,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GithubEvent) Reset()         { *m = GithubEvent{} }
func (m *GithubEvent) String() string { return proto.CompactTextString(m) }
func (*GithubEvent) ProtoMessage()    {}
func (*GithubEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_05eb92e1ad19bee0, []int{0}
}
func (m *GithubEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GithubEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GithubEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GithubEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubEvent.Merge(m, src)
}
func (m *GithubEvent) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GithubEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GithubEvent proto.InternalMessageInfo

func (m *GithubEvent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GithubEvent) GetActor() *GithubEvent_Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *GithubEvent) GetOrg() *GithubEvent_Actor {
	if m != nil {
		return m.Org
	}
	return nil
}

func (m *GithubEvent) GetRepo() *GithubEvent_Repo {
	if m != nil {
		return m.Repo
	}
	return nil
}

func (m *GithubEvent) GetPayload() *types.Struct {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GithubEvent) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *GithubEvent) GetRecord() *ddl.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type GithubEvent_Actor struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Login                string   `protobuf:"bytes,2,opt,name=login,proto3" json:"login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GithubEvent_Actor) Reset()         { *m = GithubEvent_Actor{} }
func (m *GithubEvent_Actor) String() string { return proto.CompactTextString(m) }
func (*GithubEvent_Actor) ProtoMessage()    {}
func (*GithubEvent_Actor) Descriptor() ([]byte, []int) {
	return fileDescriptor_05eb92e1ad19bee0, []int{0, 0}
}
func (m *GithubEvent_Actor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GithubEvent_Actor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GithubEvent_Actor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GithubEvent_Actor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubEvent_Actor.Merge(m, src)
}
func (m *GithubEvent_Actor) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GithubEvent_Actor) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubEvent_Actor.DiscardUnknown(m)
}

var xxx_messageInfo_GithubEvent_Actor proto.InternalMessageInfo

func (m *GithubEvent_Actor) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubEvent_Actor) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

type GithubEvent_Repo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GithubEvent_Repo) Reset()         { *m = GithubEvent_Repo{} }
func (m *GithubEvent_Repo) String() string { return proto.CompactTextString(m) }
func (*GithubEvent_Repo) ProtoMessage()    {}
func (*GithubEvent_Repo) Descriptor() ([]byte, []int) {
	return fileDescriptor_05eb92e1ad19bee0, []int{0, 1}
}
func (m *GithubEvent_Repo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GithubEvent_Repo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GithubEvent_Repo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GithubEvent_Repo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubEvent_Repo.Merge(m, src)
}
func (m *GithubEvent_Repo) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GithubEvent_Repo) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubEvent_Repo.DiscardUnknown(m)
}

var xxx_messageInfo_GithubEvent_Repo proto.InternalMessageInfo

func (m *GithubEvent_Repo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GithubEvent_Repo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GithubEvent)(nil), "foo.bar.GithubEvent")
	proto.RegisterType((*GithubEvent_Actor)(nil), "foo.bar.GithubEvent.Actor")
	proto.RegisterType((*GithubEvent_Repo)(nil), "foo.bar.GithubEvent.Repo")
}

func init() { proto.RegisterFile("table/foobar/some_tables.proto", fileDescriptor_05eb92e1ad19bee0) }

var fileDescriptor_05eb92e1ad19bee0 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x6b, 0xd4, 0x4e,
	0x18, 0xc7, 0x49, 0x36, 0xfb, 0xa7, 0xd3, 0x1f, 0x3f, 0xca, 0xb8, 0x62, 0x0c, 0xb2, 0x86, 0x45,
	0x64, 0x59, 0xcc, 0x64, 0xbb, 0xa2, 0xe8, 0x82, 0x87, 0x2d, 0x58, 0x0f, 0xde, 0xa6, 0x9e, 0xbc,
	0xd4, 0x49, 0x32, 0x1b, 0x23, 0x49, 0x9e, 0x61, 0xf2, 0xac, 0xd8, 0x96, 0x7a, 0xf0, 0xd8, 0x57,
	0xe1, 0xc5, 0x83, 0x20, 0xbd, 0xfb, 0x0a, 0xf4, 0xe8, 0x5b, 0xb0, 0xbe, 0x11, 0xc9, 0x24, 0x0b,
	0xd2, 0x0a, 0x1e, 0x06, 0x9e, 0x3f, 0x9f, 0x67, 0x78, 0xbe, 0xdf, 0x87, 0x8c, 0x50, 0x44, 0xb9,
	0x0c, 0x57, 0x00, 0x91, 0xd0, 0x61, 0x05, 0x85, 0x3c, 0x34, 0x95, 0x8a, 0x29, 0x0d, 0x08, 0xb4,
	0xbf, 0x02, 0x60, 0x91, 0xd0, 0xde, 0xb5, 0x06, 0x4c, 0x92, 0xbc, 0x7e, 0x4d, 0xd7, 0x1b, 0xa6,
	0x90, 0x82, 0x09, 0xc3, 0x3a, 0x6a, 0xab, 0xb7, 0x53, 0x80, 0x34, 0x97, 0xa1, 0xc9, 0xa2, 0xf5,
	0x2a, 0xc4, 0xac, 0x90, 0x15, 0x8a, 0x42, 0xb5, 0xc0, 0xad, 0xcb, 0x40, 0x85, 0x7a, 0x1d, 0x63,
	0xd3, 0x1d, 0x7f, 0x73, 0xc8, 0xf6, 0xb3, 0x0c, 0x5f, 0xaf, 0xa3, 0xa7, 0x6f, 0x65, 0x89, 0xf4,
	0x7f, 0x62, 0x67, 0x89, 0x6b, 0xf9, 0xd6, 0xa4, 0xc3, 0xed, 0x2c, 0xa1, 0x1e, 0x71, 0xf0, 0x48,
	0x49, 0xd7, 0xf6, 0xad, 0xc9, 0xd6, 0x5e, 0xef, 0xec, 0x7c, 0x6a, 0x0f, 0x2c, 0x6e, 0x6a, 0x74,
	0x46, 0xba, 0x22, 0x46, 0xd0, 0x6e, 0xc7, 0xb7, 0x26, 0xdb, 0x73, 0x8f, 0xb5, 0xeb, 0xb3, 0x3f,
	0x3e, 0x64, 0xcb, 0x9a, 0xe0, 0x0d, 0x48, 0xef, 0x91, 0x0e, 0xe8, 0xd4, 0x75, 0xfe, 0xc9, 0xd7,
	0x18, 0x0d, 0x88, 0xa3, 0xa5, 0x02, 0xb7, 0x6b, 0xf0, 0x9b, 0x7f, 0xc5, 0xb9, 0x54, 0xc0, 0x0d,
	0x46, 0x77, 0x49, 0x5f, 0x89, 0xa3, 0x1c, 0x44, 0xe2, 0xf6, 0xcc, 0xc4, 0x0d, 0xd6, 0x48, 0x67,
	0x1b, 0xe9, 0xec, 0xc0, 0x48, 0xe7, 0x1b, 0x8e, 0x3e, 0x26, 0x24, 0xd6, 0x52, 0xa0, 0x4c, 0x0e,
	0x05, 0xba, 0xfd, 0x76, 0xad, 0xcb, 0x53, 0x2f, 0x36, 0x8e, 0xf2, 0xad, 0x96, 0x5e, 0x22, 0x0d,
	0x49, 0x4f, 0xcb, 0x18, 0x74, 0xe2, 0xfe, 0xfc, 0xd4, 0x2c, 0x78, 0x9d, 0xa5, 0xe2, 0x58, 0x22,
	0x4a, 0x66, 0xae, 0xc7, 0xb8, 0x69, 0xf3, 0x16, 0xf3, 0x02, 0xd2, 0x35, 0xda, 0xae, 0x58, 0x3c,
	0x24, 0xdd, 0x1c, 0xd2, 0xac, 0x6c, 0x3c, 0xe6, 0x4d, 0xe2, 0x4d, 0x89, 0x53, 0x6b, 0xbb, 0x42,
	0x53, 0xe2, 0x94, 0xa2, 0x68, 0x0f, 0xc2, 0x4d, 0xbc, 0xf8, 0x60, 0x9d, 0x9d, 0x4f, 0xdf, 0x7b,
	0xc7, 0x3b, 0x96, 0x77, 0x97, 0xdc, 0x21, 0xff, 0xc5, 0x50, 0xa2, 0x2c, 0x31, 0x30, 0x57, 0x1a,
	0x0a, 0xa5, 0xf2, 0x2c, 0x16, 0x98, 0x41, 0x19, 0xbe, 0x0b, 0xca, 0xe4, 0x4d, 0x05, 0xe5, 0xf8,
	0xf9, 0xe0, 0xeb, 0xab, 0x1d, 0xdb, 0x1b, 0xac, 0xb2, 0x5c, 0x2e, 0xc2, 0x30, 0x1c, 0x77, 0x06,
	0x5f, 0xec, 0xc5, 0x83, 0x44, 0xa0, 0x7c, 0x72, 0x72, 0xe2, 0xb3, 0x03, 0x05, 0x90, 0xb3, 0xfd,
	0x4c, 0x57, 0xb8, 0x54, 0x4a, 0x96, 0x49, 0x6d, 0x02, 0xdb, 0x07, 0x5d, 0x08, 0xf4, 0xc7, 0xf3,
	0xd9, 0xec, 0x61, 0x30, 0xdb, 0x0d, 0x66, 0xf3, 0xb1, 0x7f, 0x7a, 0xfa, 0xe8, 0x33, 0xf5, 0xe7,
	0x7b, 0xf4, 0xfb, 0xc5, 0xc8, 0xfa, 0x71, 0x31, 0xb2, 0x3e, 0xfe, 0x1a, 0x59, 0x2f, 0x9d, 0x42,
	0x64, 0x65, 0xd4, 0x33, 0x1e, 0xde, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x43, 0x42, 0x3b, 0x62,
	0xf9, 0x02, 0x00, 0x00,
}

func (m *GithubEvent) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GithubEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Id))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Actor != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Actor.ProtoSize()))
		n1, err := m.Actor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Org != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Org.ProtoSize()))
		n2, err := m.Org.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Repo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Repo.ProtoSize()))
		n3, err := m.Repo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Payload != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Payload.ProtoSize()))
		n4, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.CreatedAt.ProtoSize()))
		n5, err := m.CreatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Record != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0xae
		i++
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Record.ProtoSize()))
		n6, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GithubEvent_Actor) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GithubEvent_Actor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Id))
	}
	if len(m.Login) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.Login)))
		i += copy(dAtA[i:], m.Login)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GithubEvent_Repo) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GithubEvent_Repo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSomeTables(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GithubEvent) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSomeTables(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.Actor != nil {
		l = m.Actor.ProtoSize()
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.Org != nil {
		l = m.Org.ProtoSize()
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.Repo != nil {
		l = m.Repo.ProtoSize()
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.ProtoSize()
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.ProtoSize()
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.ProtoSize()
		n += 3 + l + sovSomeTables(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GithubEvent_Actor) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSomeTables(uint64(m.Id))
	}
	l = len(m.Login)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GithubEvent_Repo) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSomeTables(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSomeTables(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSomeTables(x uint64) (n int) {
	return sovSomeTables(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GithubEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSomeTables
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GithubEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GithubEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &GithubEvent_Actor{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Org", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Org == nil {
				m.Org = &GithubEvent_Actor{}
			}
			if err := m.Org.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Repo == nil {
				m.Repo = &GithubEvent_Repo{}
			}
			if err := m.Repo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &types.Struct{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 86753:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &ddl.Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSomeTables(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GithubEvent_Actor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSomeTables
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Actor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Actor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Login = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSomeTables(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GithubEvent_Repo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSomeTables
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Repo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Repo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSomeTables(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSomeTables(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSomeTables
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSomeTables
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSomeTables
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSomeTables
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSomeTables(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSomeTables
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSomeTables = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSomeTables   = fmt.Errorf("proto: integer overflow")
)
