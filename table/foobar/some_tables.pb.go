// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table/foobar/some_tables.proto

package foobar

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	ddl "go.gazette.dev/core/table/ddl"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccessLog struct {
	ClientIp             string      `protobuf:"bytes,2,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Host                 string      `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Path                 string      `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	QueryString          string      `protobuf:"bytes,5,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	Referer              string      `protobuf:"bytes,6,opt,name=referer,proto3" json:"referer,omitempty"`
	UserAgent            string      `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Status               int32       `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	BytesRecv            int32       `protobuf:"varint,9,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`
	BytesSent            int32       `protobuf:"varint,10,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	RequestTimeMicros    int64       `protobuf:"varint,11,opt,name=request_time_micros,json=requestTimeMicros,proto3" json:"request_time_micros,omitempty"`
	UserId               string      `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Record               *ddl.Record `protobuf:"bytes,86753,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AccessLog) Reset()         { *m = AccessLog{} }
func (m *AccessLog) String() string { return proto.CompactTextString(m) }
func (*AccessLog) ProtoMessage()    {}
func (*AccessLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_05eb92e1ad19bee0, []int{0}
}
func (m *AccessLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessLog.Merge(m, src)
}
func (m *AccessLog) XXX_Size() int {
	return m.ProtoSize()
}
func (m *AccessLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessLog.DiscardUnknown(m)
}

var xxx_messageInfo_AccessLog proto.InternalMessageInfo

func (m *AccessLog) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *AccessLog) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AccessLog) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AccessLog) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func (m *AccessLog) GetReferer() string {
	if m != nil {
		return m.Referer
	}
	return ""
}

func (m *AccessLog) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *AccessLog) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AccessLog) GetBytesRecv() int32 {
	if m != nil {
		return m.BytesRecv
	}
	return 0
}

func (m *AccessLog) GetBytesSent() int32 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *AccessLog) GetRequestTimeMicros() int64 {
	if m != nil {
		return m.RequestTimeMicros
	}
	return 0
}

func (m *AccessLog) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AccessLog) GetRecord() *ddl.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func init() {
	proto.RegisterType((*AccessLog)(nil), "foo.bar.AccessLog")
}

func init() { proto.RegisterFile("table/foobar/some_tables.proto", fileDescriptor_05eb92e1ad19bee0) }

var fileDescriptor_05eb92e1ad19bee0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcf, 0xaa, 0xda, 0x40,
	0x14, 0xc6, 0x99, 0x6b, 0x6e, 0xfe, 0x8c, 0x77, 0xd1, 0xce, 0x6d, 0x61, 0x90, 0x36, 0x44, 0xa1,
	0x20, 0x2e, 0x12, 0xb0, 0x4f, 0xa0, 0x3b, 0xa1, 0xdd, 0x8c, 0x5d, 0x75, 0x13, 0x92, 0xc9, 0x31,
	0x06, 0x8c, 0x13, 0x67, 0x26, 0x82, 0x7d, 0x04, 0x9f, 0xa2, 0x9b, 0x6e, 0x5d, 0xf5, 0x21, 0xba,
	0xec, 0x2b, 0xd4, 0xbe, 0x48, 0x99, 0x89, 0xf5, 0x8a, 0x8b, 0xc0, 0xf0, 0xfb, 0x7d, 0xf3, 0x31,
	0x9c, 0x13, 0x1c, 0xea, 0x2c, 0xdf, 0x40, 0xb2, 0x12, 0x22, 0xcf, 0x64, 0xa2, 0x44, 0x0d, 0xa9,
	0x25, 0x2a, 0x6e, 0xa4, 0xd0, 0x82, 0x78, 0x2b, 0x21, 0xe2, 0x3c, 0x93, 0x83, 0xe7, 0x2e, 0x58,
	0x14, 0x1b, 0xf3, 0x75, 0x76, 0xf0, 0xa6, 0x14, 0xa5, 0xb0, 0xc7, 0xc4, 0x9c, 0x3a, 0x3a, 0xfa,
	0xd9, 0xc3, 0xc1, 0x8c, 0x73, 0x50, 0xea, 0x93, 0x28, 0xc9, 0x07, 0x1c, 0xf0, 0x4d, 0x05, 0x5b,
	0x9d, 0x56, 0x0d, 0x7d, 0x88, 0xd0, 0x38, 0x98, 0xfb, 0xc7, 0xd3, 0xc4, 0x99, 0x3e, 0xf8, 0x88,
	0xf9, 0x9d, 0x5a, 0x34, 0x64, 0x80, 0x9d, 0xb5, 0x50, 0x9a, 0xf6, 0x6c, 0xc2, 0x3d, 0x9e, 0x26,
	0xc6, 0x5b, 0x46, 0xde, 0x61, 0xa7, 0xc9, 0xf4, 0x9a, 0x3a, 0xb7, 0xb7, 0x5f, 0x21, 0x66, 0x29,
	0x19, 0xe2, 0xa7, 0x5d, 0x0b, 0xf2, 0x90, 0x2a, 0x2d, 0xab, 0x6d, 0x49, 0x1f, 0x4d, 0x8a, 0xf5,
	0x2d, 0x5b, 0x5a, 0x44, 0x46, 0xd8, 0x93, 0xb0, 0x02, 0x09, 0x92, 0xba, 0x77, 0x1d, 0xff, 0x05,
	0x79, 0x8f, 0x71, 0xab, 0x40, 0xa6, 0x59, 0x09, 0x5b, 0x4d, 0x3d, 0x5b, 0x12, 0x18, 0x32, 0x33,
	0x80, 0x84, 0xd8, 0x55, 0x3a, 0xd3, 0xad, 0xa2, 0x7e, 0x84, 0xc6, 0x8f, 0xd7, 0x17, 0x5e, 0xa8,
	0xb9, 0x9e, 0x1f, 0x34, 0xa8, 0x54, 0x02, 0xdf, 0xd3, 0xc0, 0x64, 0x58, 0x60, 0x09, 0x03, 0xbe,
	0x7f, 0xd1, 0xca, 0xb4, 0xe3, 0x1b, 0xbd, 0x34, 0xed, 0x31, 0x7e, 0x96, 0xb0, 0x6b, 0x41, 0xe9,
	0x54, 0x57, 0x35, 0xa4, 0x75, 0xc5, 0xa5, 0x50, 0xb4, 0x1f, 0xa1, 0x71, 0x8f, 0xbd, 0xbe, 0xa8,
	0x2f, 0x55, 0x0d, 0x9f, 0xad, 0x20, 0x43, 0xec, 0xd9, 0xc7, 0x56, 0x05, 0x7d, 0xba, 0x1b, 0xa9,
	0x6b, 0xc4, 0xa2, 0x20, 0x09, 0x76, 0x25, 0x70, 0x21, 0x0b, 0xfa, 0xe7, 0x87, 0x19, 0x49, 0x7f,
	0xfa, 0x36, 0x2e, 0xb3, 0x6f, 0xa0, 0x35, 0xc4, 0x76, 0x97, 0x31, 0xb3, 0x9a, 0x5d, 0x62, 0xf3,
	0xf8, 0xd7, 0x39, 0x44, 0xbf, 0xcf, 0x21, 0xfa, 0xfe, 0x37, 0x44, 0x5f, 0xa3, 0x52, 0x5c, 0xe3,
	0x05, 0xec, 0x13, 0x2e, 0x24, 0x24, 0xb7, 0x3f, 0x4b, 0xee, 0xda, 0x6d, 0x7f, 0xfc, 0x17, 0x00,
	0x00, 0xff, 0xff, 0xc2, 0x24, 0x1b, 0x86, 0x43, 0x02, 0x00, 0x00,
}

func (m *AccessLog) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSomeTables(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
		i--
		dAtA[i] = 0xae
		i--
		dAtA[i] = 0x8a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x62
	}
	if m.RequestTimeMicros != 0 {
		i = encodeVarintSomeTables(dAtA, i, uint64(m.RequestTimeMicros))
		i--
		dAtA[i] = 0x58
	}
	if m.BytesSent != 0 {
		i = encodeVarintSomeTables(dAtA, i, uint64(m.BytesSent))
		i--
		dAtA[i] = 0x50
	}
	if m.BytesRecv != 0 {
		i = encodeVarintSomeTables(dAtA, i, uint64(m.BytesRecv))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintSomeTables(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Referer) > 0 {
		i -= len(m.Referer)
		copy(dAtA[i:], m.Referer)
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.Referer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.QueryString) > 0 {
		i -= len(m.QueryString)
		copy(dAtA[i:], m.QueryString)
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.QueryString)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintSomeTables(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintSomeTables(dAtA []byte, offset int, v uint64) int {
	offset -= sovSomeTables(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccessLog) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	l = len(m.QueryString)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	l = len(m.Referer)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSomeTables(uint64(m.Status))
	}
	if m.BytesRecv != 0 {
		n += 1 + sovSomeTables(uint64(m.BytesRecv))
	}
	if m.BytesSent != 0 {
		n += 1 + sovSomeTables(uint64(m.BytesSent))
	}
	if m.RequestTimeMicros != 0 {
		n += 1 + sovSomeTables(uint64(m.RequestTimeMicros))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovSomeTables(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.ProtoSize()
		n += 3 + l + sovSomeTables(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSomeTables(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSomeTables(x uint64) (n int) {
	return sovSomeTables(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccessLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSomeTables
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRecv", wireType)
			}
			m.BytesRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRecv |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			m.BytesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimeMicros", wireType)
			}
			m.RequestTimeMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTimeMicros |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 86753:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSomeTables
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSomeTables
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &ddl.Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSomeTables(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSomeTables
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSomeTables(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSomeTables
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSomeTables
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSomeTables
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSomeTables
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSomeTables
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSomeTables        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSomeTables          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSomeTables = fmt.Errorf("proto: unexpected end of group")
)
