// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol.proto

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		protocol.proto

	It has these top-level messages:
		Label
		LabelSet
		LabelSelector
		JournalSpec
		BrokerSpec
		Fragment
		SHA1Sum
		ReadRequest
		ReadResponse
		AppendRequest
		AppendResponse
		ReplicateRequest
		ReplicateResponse
		Route
		Header
*/
package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/duration"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Status is a response status code, used universally across Gazette RPC APIs.
type Status int32

const (
	Status_OK Status = 0
	// The named journal does not exist.
	Status_JOURNAL_NOT_FOUND Status = 1
	// There is no current primary broker for the journal. This is a temporary
	// condition which should quickly resolve, assuming sufficient broker capacity.
	Status_NO_JOURNAL_PRIMARY_BROKER Status = 2
	// The present broker is not the assigned primary broker for the journal.
	Status_NOT_JOURNAL_PRIMARY_BROKER Status = 3
	// The present broker is not an assigned broker for the journal.
	Status_NOT_JOURNAL_BROKER Status = 5
	// There are an insufficient number of assigned brokers for the journal
	// to meet its required replication.
	Status_INSUFFICIENT_JOURNAL_BROKERS Status = 4
	// The requested offset is not yet available. This indicates either that the
	// offset has not yet been written, or that the broker is not yet aware of a
	// written fragment covering the offset. Returned only by non-blocking reads.
	Status_OFFSET_NOT_YET_AVAILABLE Status = 6
	// The peer disagrees with the Route accompanying a ReplicateRequest.
	Status_WRONG_ROUTE Status = 7
	// The peer disagrees with the Fragment proposal accompanying a ReplicateRequest.
	Status_FRAGMENT_MISMATCH Status = 8
)

var Status_name = map[int32]string{
	0: "OK",
	1: "JOURNAL_NOT_FOUND",
	2: "NO_JOURNAL_PRIMARY_BROKER",
	3: "NOT_JOURNAL_PRIMARY_BROKER",
	5: "NOT_JOURNAL_BROKER",
	4: "INSUFFICIENT_JOURNAL_BROKERS",
	6: "OFFSET_NOT_YET_AVAILABLE",
	7: "WRONG_ROUTE",
	8: "FRAGMENT_MISMATCH",
}
var Status_value = map[string]int32{
	"OK":                           0,
	"JOURNAL_NOT_FOUND":            1,
	"NO_JOURNAL_PRIMARY_BROKER":    2,
	"NOT_JOURNAL_PRIMARY_BROKER":   3,
	"NOT_JOURNAL_BROKER":           5,
	"INSUFFICIENT_JOURNAL_BROKERS": 4,
	"OFFSET_NOT_YET_AVAILABLE":     6,
	"WRONG_ROUTE":                  7,
	"FRAGMENT_MISMATCH":            8,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

// CompressionCode defines codecs known to Gazette.
type CompressionCodec int32

const (
	// INVALID is the zero-valued CompressionCodec, and is not a valid codec.
	CompressionCodec_INVALID CompressionCodec = 0
	// NONE encodes Fragments without any applied compression, with default suffix ".raw".
	CompressionCodec_NONE CompressionCodec = 1
	// GZIP encodes Fragments using the Gzip library, with default suffix ".gz".
	CompressionCodec_GZIP CompressionCodec = 2
	// ZSTANDARD encodes Fragments using the ZStandard library, with default suffix ".zst".
	CompressionCodec_ZSTANDARD CompressionCodec = 3
	// SNAPPY encodes Fragments using the Snappy library, with default suffix ".sz".
	CompressionCodec_SNAPPY CompressionCodec = 4
	// GZIP_OFFLOAD_DECOMPRESSION is the GZIP codec with additional behavior
	// around reads and writes to remote Fragment stores, designed to offload
	// the work of decompression onto compatible stores. Specifically:
	//  * Fragments are written with a "Content-Encoding: gzip" header.
	//  * Client read requests are made with "Accept-Encoding: identity".
	// This can be helpful in contexts where reader IO bandwidth to the storage
	// API is unconstrained, as the cost of decompression is offloaded to the
	// store and CPU-intensive batch readers may receive a parallelism benefit.
	// While this codec may provide substantial read-time performance improvements,
	// it is an advanced configuration and the "Content-Encoding" header handling
	// can be subtle and sometimes confusing. It uses the default suffix ".gzod".
	CompressionCodec_GZIP_OFFLOAD_DECOMPRESSION CompressionCodec = 5
)

var CompressionCodec_name = map[int32]string{
	0: "INVALID",
	1: "NONE",
	2: "GZIP",
	3: "ZSTANDARD",
	4: "SNAPPY",
	5: "GZIP_OFFLOAD_DECOMPRESSION",
}
var CompressionCodec_value = map[string]int32{
	"INVALID":                    0,
	"NONE":                       1,
	"GZIP":                       2,
	"ZSTANDARD":                  3,
	"SNAPPY":                     4,
	"GZIP_OFFLOAD_DECOMPRESSION": 5,
}

func (x CompressionCodec) String() string {
	return proto.EnumName(CompressionCodec_name, int32(x))
}
func (CompressionCodec) EnumDescriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

// Label defines a key & value pair which can be attached to entities like
// JournalSpecs and BrokerSpecs. Labels may be used to provide identifying
// attributes which do not directly imply semantics to the core system, but
// are meaningful to users or for higher-level Gazette tools. For example,
// topics of JournalSpecs are represented as the well-known label "topic".
type Label struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

func (m *Label) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LabelSet is a collection of labels and their values.
type LabelSet struct {
	// Labels of the set. Instances must be unique and in sorted order.
	Labels []Label `protobuf:"bytes,1,rep,name=labels" json:"labels" yaml:",omitempty"`
}

func (m *LabelSet) Reset()                    { *m = LabelSet{} }
func (m *LabelSet) String() string            { return proto.CompactTextString(m) }
func (*LabelSet) ProtoMessage()               {}
func (*LabelSet) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

func (m *LabelSet) GetLabels() []Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

// LabelSelector defines a filter over LabelSets.
type LabelSelector struct {
	// Include is Labels which must be matched for a LabelSet to be selected. If
	// empty, all Labels are included. An include Label with empty ("") value is
	// matched by a Label of the same name having any value.
	Include LabelSet `protobuf:"bytes,1,opt,name=include" json:"include"`
	// Exclude is Labels which cannot be matched for a LabelSet to be selected. If
	// empty, no Labels are excluded. An exclude Label with empty ("") value
	// excludes a Label of the same name having any value.
	Exclude LabelSet `protobuf:"bytes,2,opt,name=exclude" json:"exclude"`
}

func (m *LabelSelector) Reset()                    { *m = LabelSelector{} }
func (m *LabelSelector) String() string            { return proto.CompactTextString(m) }
func (*LabelSelector) ProtoMessage()               {}
func (*LabelSelector) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{2} }

func (m *LabelSelector) GetInclude() LabelSet {
	if m != nil {
		return m.Include
	}
	return LabelSet{}
}

func (m *LabelSelector) GetExclude() LabelSet {
	if m != nil {
		return m.Exclude
	}
	return LabelSet{}
}

// JournalSpec describes a Journal and its configuration.
type JournalSpec struct {
	// Name of the Journal.
	Name Journal `protobuf:"bytes,1,opt,name=name,proto3,casttype=Journal" json:"name,omitempty" yaml:",omitempty"`
	// Desired replication of this Journal. This defines the Journal's tolerance
	// to broker failures before data loss can occur (eg, a replication factor
	// of three means two failures are tolerated).
	Replication int32 `protobuf:"varint,2,opt,name=replication,proto3" json:"replication,omitempty" yaml:",omitempty"`
	// User-defined Labels of this JournalSpec.
	LabelSet `protobuf:"bytes,3,opt,name=labels,embedded=labels" json:"labels" yaml:",omitempty,inline"`
	Fragment JournalSpec_Fragment `protobuf:"bytes,4,opt,name=fragment" json:"fragment" yaml:",omitempty"`
	// If true, this Journal will not accept Append requests.
	ReadOnly bool `protobuf:"varint,6,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty" yaml:",omitempty"`
}

func (m *JournalSpec) Reset()                    { *m = JournalSpec{} }
func (m *JournalSpec) String() string            { return proto.CompactTextString(m) }
func (*JournalSpec) ProtoMessage()               {}
func (*JournalSpec) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{3} }

func (m *JournalSpec) GetName() Journal {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JournalSpec) GetReplication() int32 {
	if m != nil {
		return m.Replication
	}
	return 0
}

func (m *JournalSpec) GetFragment() JournalSpec_Fragment {
	if m != nil {
		return m.Fragment
	}
	return JournalSpec_Fragment{}
}

func (m *JournalSpec) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Fragment is JournalSpec configuration which pertains to the creation,
// persistence, and indexing of the Journal's Fragments.
type JournalSpec_Fragment struct {
	// Target content length of each Fragment. In normal operation after Fragments
	// reach at least this length, they will be closed and new ones begun. Note
	// lengths may be smaller at times (eg, due to changes in Journal routing
	// topology). Content length differs from Fragment file size, in that the
	// former reflects uncompressed bytes.
	Length int64 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty" yaml:",omitempty"`
	// Codec used to compress Journal Fragments.
	CompressionCodec CompressionCodec `protobuf:"varint,2,opt,name=compression_codec,json=compressionCodec,proto3,enum=protocol.CompressionCodec" json:"compression_codec,omitempty" yaml:"compression_codec,omitempty"`
	// Storage backend base path for this Journal's Fragments. Must be in URL
	// form, with the choice of backend defined by the scheme. The full path of
	// a Journal's Fragment is derived by joining the fragment_store path with
	// the Fragment's ContentPath. Eg, given a fragment_store of
	// "s3://My-AWS-bucket/a/prefix" and a JournalSpec of name "my/journal",
	// a complete Fragment path might be:
	//   "s3://My-AWS-bucket/a/prefix/my/journal/000123-000456-789abcdef.gzip
	//
	// Multiple fragment_stores may be specified, in which case the Journal's
	// Fragments are the union of all Fragments present across all stores, and
	// new Fragments always persist to the first specified store. This can be
	// helpful in performing incremental migrations, where new Journal content is
	// written to the new store, while content in the old store remains available
	// (and, depending on fragment_retention or recovery log pruning, may
	// eventually be removed).
	//
	// If no fragment_stores are specified, the Journal is still useable but will
	// not persist Fragments to any a backing fragment store. This allows for
	// real-time streaming use cases where reads of historical data are not needed.
	Stores []FragmentStore `protobuf:"bytes,3,rep,name=stores,casttype=FragmentStore" json:"stores,omitempty" yaml:",omitempty"`
	// Interval of time between refreshes of remote Fragment listings from
	// configured fragment_stores.
	RefreshInterval time.Duration `protobuf:"bytes,4,opt,name=refresh_interval,json=refreshInterval,stdduration" json:"refresh_interval" yaml:"refresh_interval,omitempty"`
	// Retention duration for historical Fragments of this Journal within the
	// Fragment stores. If zero, Fragments are retained indefinetely.
	Retention time.Duration `protobuf:"bytes,5,opt,name=retention,stdduration" json:"retention" yaml:",omitempty"`
}

func (m *JournalSpec_Fragment) Reset()                    { *m = JournalSpec_Fragment{} }
func (m *JournalSpec_Fragment) String() string            { return proto.CompactTextString(m) }
func (*JournalSpec_Fragment) ProtoMessage()               {}
func (*JournalSpec_Fragment) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{3, 0} }

func (m *JournalSpec_Fragment) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *JournalSpec_Fragment) GetCompressionCodec() CompressionCodec {
	if m != nil {
		return m.CompressionCodec
	}
	return CompressionCodec_INVALID
}

func (m *JournalSpec_Fragment) GetStores() []FragmentStore {
	if m != nil {
		return m.Stores
	}
	return nil
}

func (m *JournalSpec_Fragment) GetRefreshInterval() time.Duration {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *JournalSpec_Fragment) GetRetention() time.Duration {
	if m != nil {
		return m.Retention
	}
	return 0
}

// BrokerSpec describes a Gazette broker and its configuration.
type BrokerSpec struct {
	Id BrokerSpec_ID `protobuf:"bytes,1,opt,name=id" json:"id"`
	// Advertised URL of the Broker.
	Endpoint Endpoint `protobuf:"bytes,2,opt,name=endpoint,proto3,casttype=Endpoint" json:"endpoint,omitempty"`
	// Maximum number of assigned Journal replicas.
	JournalLimit uint32 `protobuf:"varint,3,opt,name=journal_limit,json=journalLimit,proto3" json:"journal_limit,omitempty"`
}

func (m *BrokerSpec) Reset()                    { *m = BrokerSpec{} }
func (m *BrokerSpec) String() string            { return proto.CompactTextString(m) }
func (*BrokerSpec) ProtoMessage()               {}
func (*BrokerSpec) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{4} }

func (m *BrokerSpec) GetId() BrokerSpec_ID {
	if m != nil {
		return m.Id
	}
	return BrokerSpec_ID{}
}

func (m *BrokerSpec) GetEndpoint() Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *BrokerSpec) GetJournalLimit() uint32 {
	if m != nil {
		return m.JournalLimit
	}
	return 0
}

type BrokerSpec_ID struct {
	// "Zone" in which the Broker is running. Zones may be AWS, Azure, or Google
	// Cloud Platform zone identifiers, or rack locations within a colo, or
	// given some other custom meaning. Gazette will replicate every Journal
	// across multiple zones, and seeks to minimize traffic which must cross zones
	// (for example, by proxying reads to a broker in the current zone).
	Zone string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	// Unique suffix of the broker within |zone|.
	Suffix string `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (m *BrokerSpec_ID) Reset()                    { *m = BrokerSpec_ID{} }
func (m *BrokerSpec_ID) String() string            { return proto.CompactTextString(m) }
func (*BrokerSpec_ID) ProtoMessage()               {}
func (*BrokerSpec_ID) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{4, 0} }

func (m *BrokerSpec_ID) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *BrokerSpec_ID) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

// Fragment is a content-addressed description of a contiguous Journal span,
// defined by the [begin, end) offset range covered by the Fragment and the
// SHA1 sum of the corresponding Journal content.
type Fragment struct {
	// Journal of the Fragment.
	Journal Journal `protobuf:"bytes,1,opt,name=journal,proto3,casttype=Journal" json:"journal,omitempty"`
	// Begin (inclusive) and end (exclusive) offset of the Fragment within the Journal.
	Begin int64 `protobuf:"varint,2,opt,name=begin,proto3" json:"begin,omitempty"`
	End   int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// SHA1 sum of the Fragment's content.
	Sum SHA1Sum `protobuf:"bytes,4,opt,name=sum" json:"sum"`
	// Codec with which the Fragment's content is compressed.
	CompressionCodec CompressionCodec `protobuf:"varint,5,opt,name=compression_codec,json=compressionCodec,proto3,enum=protocol.CompressionCodec" json:"compression_codec,omitempty"`
	// Fragment store which backs the Fragment. Empty if the Fragment has yet to
	// be persisted and is still local to a Broker.
	BackingStore FragmentStore `protobuf:"bytes,6,opt,name=backing_store,json=backingStore,proto3,casttype=FragmentStore" json:"backing_store,omitempty"`
	// Modification timestamp of the Fragment within the backing store.
	ModTime time.Time `protobuf:"bytes,7,opt,name=mod_time,json=modTime,stdtime" json:"mod_time"`
}

func (m *Fragment) Reset()                    { *m = Fragment{} }
func (m *Fragment) String() string            { return proto.CompactTextString(m) }
func (*Fragment) ProtoMessage()               {}
func (*Fragment) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{5} }

func (m *Fragment) GetJournal() Journal {
	if m != nil {
		return m.Journal
	}
	return ""
}

func (m *Fragment) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *Fragment) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Fragment) GetSum() SHA1Sum {
	if m != nil {
		return m.Sum
	}
	return SHA1Sum{}
}

func (m *Fragment) GetCompressionCodec() CompressionCodec {
	if m != nil {
		return m.CompressionCodec
	}
	return CompressionCodec_INVALID
}

func (m *Fragment) GetBackingStore() FragmentStore {
	if m != nil {
		return m.BackingStore
	}
	return ""
}

func (m *Fragment) GetModTime() time.Time {
	if m != nil {
		return m.ModTime
	}
	return time.Time{}
}

// SHA1Sum is a 160-bit SHA1 digest.
type SHA1Sum struct {
	Part1 uint64 `protobuf:"fixed64,1,opt,name=part1,proto3" json:"part1,omitempty"`
	Part2 uint64 `protobuf:"fixed64,2,opt,name=part2,proto3" json:"part2,omitempty"`
	Part3 uint32 `protobuf:"fixed32,3,opt,name=part3,proto3" json:"part3,omitempty"`
}

func (m *SHA1Sum) Reset()                    { *m = SHA1Sum{} }
func (m *SHA1Sum) String() string            { return proto.CompactTextString(m) }
func (*SHA1Sum) ProtoMessage()               {}
func (*SHA1Sum) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{6} }

func (m *SHA1Sum) GetPart1() uint64 {
	if m != nil {
		return m.Part1
	}
	return 0
}

func (m *SHA1Sum) GetPart2() uint64 {
	if m != nil {
		return m.Part2
	}
	return 0
}

func (m *SHA1Sum) GetPart3() uint32 {
	if m != nil {
		return m.Part3
	}
	return 0
}

type ReadRequest struct {
	// Header is attached by a proxying broker peer.
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Journal to be read.
	Journal Journal `protobuf:"bytes,2,opt,name=journal,proto3,casttype=Journal" json:"journal,omitempty"`
	// Desired offset to begin reading from. Value -1 has special handling, where
	// the read is performed from the current write head. All other positive
	// values specify a desired exact byte offset to read from. If the offset is
	// not available (eg, because it represents a portion of Journal which has
	// been permantently deleted), the broker will return the next available
	// offset. Callers should therefore always inspect the ReadResponse offset.
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// Whether the operation should block until content becomes available.
	// OFFSET_NOT_YET_AVAILABLE is returned if a non-blocking read has no ready content.
	Block bool `protobuf:"varint,4,opt,name=block,proto3" json:"block,omitempty"`
	// If do_not_proxy is true, the broker will not proxy the read to another
	// broker, or open and proxy a remote Fragment on the client's behalf.
	DoNotProxy bool `protobuf:"varint,5,opt,name=do_not_proxy,json=doNotProxy,proto3" json:"do_not_proxy,omitempty"`
	// If metadata_only is true, the broker will respond with Journal and
	// Fragment metadata but not content.
	MetadataOnly bool `protobuf:"varint,6,opt,name=metadata_only,json=metadataOnly,proto3" json:"metadata_only,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{7} }

func (m *ReadRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReadRequest) GetJournal() Journal {
	if m != nil {
		return m.Journal
	}
	return ""
}

func (m *ReadRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadRequest) GetBlock() bool {
	if m != nil {
		return m.Block
	}
	return false
}

func (m *ReadRequest) GetDoNotProxy() bool {
	if m != nil {
		return m.DoNotProxy
	}
	return false
}

func (m *ReadRequest) GetMetadataOnly() bool {
	if m != nil {
		return m.MetadataOnly
	}
	return false
}

type ReadResponse struct {
	// Status of the Read RPC.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=protocol.Status" json:"status,omitempty"`
	// Header of the response. Accompanies the first ReadResponse in the response stream.
	Header *Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	// The effective offset of the read. See ReadRequest offset.
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The offset to next be written, by the next append transaction served by
	// broker. In other words, the last offset through which content is
	// available to be read from the Journal.
	WriteHead int64 `protobuf:"varint,4,opt,name=write_head,json=writeHead,proto3" json:"write_head,omitempty"`
	// Fragment to which the offset was mapped.
	Fragment *Fragment `protobuf:"bytes,5,opt,name=fragment" json:"fragment,omitempty"`
	// If Fragment is remote, a URL from which it may be directly read.
	FragmentUrl string `protobuf:"bytes,6,opt,name=fragment_url,json=fragmentUrl,proto3" json:"fragment_url,omitempty"`
	// Content chunks of the read.
	Content []byte `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{8} }

func (m *ReadResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *ReadResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReadResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadResponse) GetWriteHead() int64 {
	if m != nil {
		return m.WriteHead
	}
	return 0
}

func (m *ReadResponse) GetFragment() *Fragment {
	if m != nil {
		return m.Fragment
	}
	return nil
}

func (m *ReadResponse) GetFragmentUrl() string {
	if m != nil {
		return m.FragmentUrl
	}
	return ""
}

func (m *ReadResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type AppendRequest struct {
	// Header is attached by a proxying broker peer to the first AppendRequest message.
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Journal to be appended to.
	Journal Journal `protobuf:"bytes,2,opt,name=journal,proto3,casttype=Journal" json:"journal,omitempty"`
	// If do_not_proxy is true, the broker will not proxy the append if it is
	// not the current primary.
	DoNotProxy bool `protobuf:"varint,3,opt,name=do_not_proxy,json=doNotProxy,proto3" json:"do_not_proxy,omitempty"`
	// Content chunks to be appended. Immediately prior to closing the stream,
	// the client must send an empty chunk (eg, zero-valued AppendRequest) to
	// indicate the Append should be committed. Absence of this empty chunk
	// prior to EOF is interpreted by the broker as a rollback of the Append.
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *AppendRequest) Reset()                    { *m = AppendRequest{} }
func (m *AppendRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()               {}
func (*AppendRequest) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{9} }

func (m *AppendRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AppendRequest) GetJournal() Journal {
	if m != nil {
		return m.Journal
	}
	return ""
}

func (m *AppendRequest) GetDoNotProxy() bool {
	if m != nil {
		return m.DoNotProxy
	}
	return false
}

func (m *AppendRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type AppendResponse struct {
	// Status of the Append RPC.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=protocol.Status" json:"status,omitempty"`
	// Header of the response.
	Header *Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	// If status is OK, then |commit| is the Fragment which places the
	// committed Append content within the Journal.
	Commit *Fragment `protobuf:"bytes,3,opt,name=commit" json:"commit,omitempty"`
}

func (m *AppendResponse) Reset()                    { *m = AppendResponse{} }
func (m *AppendResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendResponse) ProtoMessage()               {}
func (*AppendResponse) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{10} }

func (m *AppendResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *AppendResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AppendResponse) GetCommit() *Fragment {
	if m != nil {
		return m.Commit
	}
	return nil
}

type ReplicateRequest struct {
	// Header defines the primary broker, Route, and Etcd Revision under which
	// this Replicate stream is being established. Each replication peer
	// independently inspects and verifies the current Journal Route topology.
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Journal to be replicated to.
	Journal Journal `protobuf:"bytes,2,opt,name=journal,proto3,casttype=Journal" json:"journal,omitempty"`
	// Proposed Fragment to commit. Also verified by each replica.
	Proposal *Fragment `protobuf:"bytes,3,opt,name=proposal" json:"proposal,omitempty"`
	// Content to be replicated.
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// Delta offset of |content| relative to current Fragment |end|.
	ContentDelta int64 `protobuf:"varint,5,opt,name=content_delta,json=contentDelta,proto3" json:"content_delta,omitempty"`
	// Acknowledge requests that the peer send an acknowledging ReplicateResponse
	// on successful application of the ReplicateRequest.
	Acknowledge bool `protobuf:"varint,6,opt,name=acknowledge,proto3" json:"acknowledge,omitempty"`
}

func (m *ReplicateRequest) Reset()                    { *m = ReplicateRequest{} }
func (m *ReplicateRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicateRequest) ProtoMessage()               {}
func (*ReplicateRequest) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{11} }

func (m *ReplicateRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReplicateRequest) GetJournal() Journal {
	if m != nil {
		return m.Journal
	}
	return ""
}

func (m *ReplicateRequest) GetProposal() *Fragment {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *ReplicateRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ReplicateRequest) GetContentDelta() int64 {
	if m != nil {
		return m.ContentDelta
	}
	return 0
}

func (m *ReplicateRequest) GetAcknowledge() bool {
	if m != nil {
		return m.Acknowledge
	}
	return false
}

type ReplicateResponse struct {
	// Status of the Replicate RPC.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=protocol.Status" json:"status,omitempty"`
	// Header of the response.
	Header *Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	// If status is FRAGMENT_MISMATCH, then |fragment| is the replica's
	// Fragment at the current Journal head, which was found to be inconsistent
	// with the request |proposal| Fragment.
	Fragment *Fragment `protobuf:"bytes,3,opt,name=fragment" json:"fragment,omitempty"`
}

func (m *ReplicateResponse) Reset()                    { *m = ReplicateResponse{} }
func (m *ReplicateResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplicateResponse) ProtoMessage()               {}
func (*ReplicateResponse) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{12} }

func (m *ReplicateResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *ReplicateResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReplicateResponse) GetFragment() *Fragment {
	if m != nil {
		return m.Fragment
	}
	return nil
}

// Route captures the current topology of a Journal and the brokers serving it.
type Route struct {
	// Brokers of the Route, ordered on ascending BrokerSpec (zone, name).
	// Note that only a Route-relevant subset of the spec is populated
	// (specifically name, zone, & endpoint).
	Brokers []BrokerSpec_ID `protobuf:"bytes,1,rep,name=brokers" json:"brokers"`
	// Index of the BrokerSpec serving as primary within |brokers|,
	// or -1 of no broker is currently primary.
	Primary int32 `protobuf:"varint,2,opt,name=primary,proto3" json:"primary,omitempty"`
	// Endpoints of each Route Broker. If not empty, |endpoints| has the same
	// length and order as |brokers|, and captures the endpoint of each one.
	Endpoints []Endpoint `protobuf:"bytes,3,rep,name=endpoints,casttype=Endpoint" json:"endpoints,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{13} }

func (m *Route) GetBrokers() []BrokerSpec_ID {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func (m *Route) GetPrimary() int32 {
	if m != nil {
		return m.Primary
	}
	return 0
}

func (m *Route) GetEndpoints() []Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// Header captures metadata such as the broker responsible for processing
// an RPC, and its effective Etcd state.
type Header struct {
	// ID of the broker responsible for request processing.
	BrokerId BrokerSpec_ID `protobuf:"bytes,1,opt,name=broker_id,json=brokerId" json:"broker_id"`
	// Route of the journal.
	Route Route       `protobuf:"bytes,2,opt,name=route" json:"route"`
	Etcd  Header_Etcd `protobuf:"bytes,3,opt,name=etcd" json:"etcd"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{14} }

func (m *Header) GetBrokerId() BrokerSpec_ID {
	if m != nil {
		return m.BrokerId
	}
	return BrokerSpec_ID{}
}

func (m *Header) GetRoute() Route {
	if m != nil {
		return m.Route
	}
	return Route{}
}

func (m *Header) GetEtcd() Header_Etcd {
	if m != nil {
		return m.Etcd
	}
	return Header_Etcd{}
}

// Etcd represents the effective Etcd MVCC state under which a Gazette broker
// is operating in its processing of requests and responses. Its inclusion
// allows brokers to reason about relative "happened before" Revision ordering
// of apparent routing conflicts in proxied or replicated requests, as well
// as enabling sanity checks over equality of Etcd ClusterId (and precluding,
// for example, split-brain scenarios where different brokers are backed by
// different Etcd clusters). Etcd is kept in sync with etcdserverpb.ResponseHeader.
type Header_Etcd struct {
	// cluster_id is the ID of the cluster.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// member_id is the ID of the member.
	MemberId uint64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// revision is the Etcd key-value store revision when the request was applied.
	Revision int64 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// raft_term is the raft term when the request was applied.
	RaftTerm uint64 `protobuf:"varint,4,opt,name=raft_term,json=raftTerm,proto3" json:"raft_term,omitempty"`
}

func (m *Header_Etcd) Reset()                    { *m = Header_Etcd{} }
func (m *Header_Etcd) String() string            { return proto.CompactTextString(m) }
func (*Header_Etcd) ProtoMessage()               {}
func (*Header_Etcd) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{14, 0} }

func (m *Header_Etcd) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *Header_Etcd) GetMemberId() uint64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *Header_Etcd) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Header_Etcd) GetRaftTerm() uint64 {
	if m != nil {
		return m.RaftTerm
	}
	return 0
}

func init() {
	proto.RegisterType((*Label)(nil), "protocol.Label")
	proto.RegisterType((*LabelSet)(nil), "protocol.LabelSet")
	proto.RegisterType((*LabelSelector)(nil), "protocol.LabelSelector")
	proto.RegisterType((*JournalSpec)(nil), "protocol.JournalSpec")
	proto.RegisterType((*JournalSpec_Fragment)(nil), "protocol.JournalSpec.Fragment")
	proto.RegisterType((*BrokerSpec)(nil), "protocol.BrokerSpec")
	proto.RegisterType((*BrokerSpec_ID)(nil), "protocol.BrokerSpec.ID")
	proto.RegisterType((*Fragment)(nil), "protocol.Fragment")
	proto.RegisterType((*SHA1Sum)(nil), "protocol.SHA1Sum")
	proto.RegisterType((*ReadRequest)(nil), "protocol.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "protocol.ReadResponse")
	proto.RegisterType((*AppendRequest)(nil), "protocol.AppendRequest")
	proto.RegisterType((*AppendResponse)(nil), "protocol.AppendResponse")
	proto.RegisterType((*ReplicateRequest)(nil), "protocol.ReplicateRequest")
	proto.RegisterType((*ReplicateResponse)(nil), "protocol.ReplicateResponse")
	proto.RegisterType((*Route)(nil), "protocol.Route")
	proto.RegisterType((*Header)(nil), "protocol.Header")
	proto.RegisterType((*Header_Etcd)(nil), "protocol.Header.Etcd")
	proto.RegisterEnum("protocol.Status", Status_name, Status_value)
	proto.RegisterEnum("protocol.CompressionCodec", CompressionCodec_name, CompressionCodec_value)
}
func (this *SHA1Sum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SHA1Sum)
	if !ok {
		that2, ok := that.(SHA1Sum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Part1 != that1.Part1 {
		return false
	}
	if this.Part2 != that1.Part2 {
		return false
	}
	if this.Part3 != that1.Part3 {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Broker service

type BrokerClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Broker_ReadClient, error)
	Append(ctx context.Context, opts ...grpc.CallOption) (Broker_AppendClient, error)
	Replicate(ctx context.Context, opts ...grpc.CallOption) (Broker_ReplicateClient, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Broker_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[0], c.cc, "/protocol.Broker/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Broker_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type brokerReadClient struct {
	grpc.ClientStream
}

func (x *brokerReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Append(ctx context.Context, opts ...grpc.CallOption) (Broker_AppendClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[1], c.cc, "/protocol.Broker/Append", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerAppendClient{stream}
	return x, nil
}

type Broker_AppendClient interface {
	Send(*AppendRequest) error
	CloseAndRecv() (*AppendResponse, error)
	grpc.ClientStream
}

type brokerAppendClient struct {
	grpc.ClientStream
}

func (x *brokerAppendClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerAppendClient) CloseAndRecv() (*AppendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AppendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (Broker_ReplicateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Broker_serviceDesc.Streams[2], c.cc, "/protocol.Broker/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerReplicateClient{stream}
	return x, nil
}

type Broker_ReplicateClient interface {
	Send(*ReplicateRequest) error
	Recv() (*ReplicateResponse, error)
	grpc.ClientStream
}

type brokerReplicateClient struct {
	grpc.ClientStream
}

func (x *brokerReplicateClient) Send(m *ReplicateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerReplicateClient) Recv() (*ReplicateResponse, error) {
	m := new(ReplicateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Broker service

type BrokerServer interface {
	Read(*ReadRequest, Broker_ReadServer) error
	Append(Broker_AppendServer) error
	Replicate(Broker_ReplicateServer) error
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServer).Read(m, &brokerReadServer{stream})
}

type Broker_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type brokerReadServer struct {
	grpc.ServerStream
}

func (x *brokerReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Broker_Append_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Append(&brokerAppendServer{stream})
}

type Broker_AppendServer interface {
	SendAndClose(*AppendResponse) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type brokerAppendServer struct {
	grpc.ServerStream
}

func (x *brokerAppendServer) SendAndClose(m *AppendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerAppendServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Replicate(&brokerReplicateServer{stream})
}

type Broker_ReplicateServer interface {
	Send(*ReplicateResponse) error
	Recv() (*ReplicateRequest, error)
	grpc.ServerStream
}

type brokerReplicateServer struct {
	grpc.ServerStream
}

func (x *brokerReplicateServer) Send(m *ReplicateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerReplicateServer) Recv() (*ReplicateRequest, error) {
	m := new(ReplicateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Broker_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Append",
			Handler:       _Broker_Append_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Replicate",
			Handler:       _Broker_Replicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol.proto",
}

func (m *Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Label) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *LabelSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, msg := range m.Labels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProtocol(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LabelSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Include.Size()))
	n1, err := m.Include.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Exclude.Size()))
	n2, err := m.Exclude.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *JournalSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Replication != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Replication))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.LabelSet.Size()))
	n3, err := m.LabelSet.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Fragment.Size()))
	n4, err := m.Fragment.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.ReadOnly {
		dAtA[i] = 0x30
		i++
		if m.ReadOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JournalSpec_Fragment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JournalSpec_Fragment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Length))
	}
	if m.CompressionCodec != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.CompressionCodec))
	}
	if len(m.Stores) > 0 {
		for _, s := range m.Stores {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(types.SizeOfStdDuration(m.RefreshInterval)))
	n5, err := types.StdDurationMarshalTo(m.RefreshInterval, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x2a
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(types.SizeOfStdDuration(m.Retention)))
	n6, err := types.StdDurationMarshalTo(m.Retention, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *BrokerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrokerSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Id.Size()))
	n7, err := m.Id.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if m.JournalLimit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.JournalLimit))
	}
	return i, nil
}

func (m *BrokerSpec_ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrokerSpec_ID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Zone) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	return i, nil
}

func (m *Fragment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fragment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Journal) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Journal)))
		i += copy(dAtA[i:], m.Journal)
	}
	if m.Begin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Begin))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.End))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Sum.Size()))
	n8, err := m.Sum.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.CompressionCodec != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.CompressionCodec))
	}
	if len(m.BackingStore) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.BackingStore)))
		i += copy(dAtA[i:], m.BackingStore)
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(types.SizeOfStdTime(m.ModTime)))
	n9, err := types.StdTimeMarshalTo(m.ModTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *SHA1Sum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SHA1Sum) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Part1 != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Part1))
		i += 8
	}
	if m.Part2 != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Part2))
		i += 8
	}
	if m.Part3 != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Part3))
		i += 4
	}
	return i, nil
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Header.Size()))
		n10, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Journal) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Journal)))
		i += copy(dAtA[i:], m.Journal)
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Offset))
	}
	if m.Block {
		dAtA[i] = 0x20
		i++
		if m.Block {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DoNotProxy {
		dAtA[i] = 0x28
		i++
		if m.DoNotProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MetadataOnly {
		dAtA[i] = 0x30
		i++
		if m.MetadataOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Status))
	}
	if m.Header != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Header.Size()))
		n11, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Offset))
	}
	if m.WriteHead != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.WriteHead))
	}
	if m.Fragment != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Fragment.Size()))
		n12, err := m.Fragment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.FragmentUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.FragmentUrl)))
		i += copy(dAtA[i:], m.FragmentUrl)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *AppendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Header.Size()))
		n13, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Journal) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Journal)))
		i += copy(dAtA[i:], m.Journal)
	}
	if m.DoNotProxy {
		dAtA[i] = 0x18
		i++
		if m.DoNotProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *AppendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Status))
	}
	if m.Header != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Header.Size()))
		n14, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Commit != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Commit.Size()))
		n15, err := m.Commit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *ReplicateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Header.Size()))
		n16, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Journal) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Journal)))
		i += copy(dAtA[i:], m.Journal)
	}
	if m.Proposal != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Proposal.Size()))
		n17, err := m.Proposal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.ContentDelta != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.ContentDelta))
	}
	if m.Acknowledge {
		dAtA[i] = 0x30
		i++
		if m.Acknowledge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReplicateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Status))
	}
	if m.Header != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Header.Size()))
		n18, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Fragment != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Fragment.Size()))
		n19, err := m.Fragment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Brokers) > 0 {
		for _, msg := range m.Brokers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProtocol(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Primary != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Primary))
	}
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.BrokerId.Size()))
	n20, err := m.BrokerId.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x12
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Route.Size()))
	n21, err := m.Route.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x1a
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Etcd.Size()))
	n22, err := m.Etcd.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *Header_Etcd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header_Etcd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.ClusterId))
	}
	if m.MemberId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.MemberId))
	}
	if m.Revision != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Revision))
	}
	if m.RaftTerm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.RaftTerm))
	}
	return i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Label) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *LabelSet) Size() (n int) {
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *LabelSelector) Size() (n int) {
	var l int
	_ = l
	l = m.Include.Size()
	n += 1 + l + sovProtocol(uint64(l))
	l = m.Exclude.Size()
	n += 1 + l + sovProtocol(uint64(l))
	return n
}

func (m *JournalSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Replication != 0 {
		n += 1 + sovProtocol(uint64(m.Replication))
	}
	l = m.LabelSet.Size()
	n += 1 + l + sovProtocol(uint64(l))
	l = m.Fragment.Size()
	n += 1 + l + sovProtocol(uint64(l))
	if m.ReadOnly {
		n += 2
	}
	return n
}

func (m *JournalSpec_Fragment) Size() (n int) {
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovProtocol(uint64(m.Length))
	}
	if m.CompressionCodec != 0 {
		n += 1 + sovProtocol(uint64(m.CompressionCodec))
	}
	if len(m.Stores) > 0 {
		for _, s := range m.Stores {
			l = len(s)
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	l = types.SizeOfStdDuration(m.RefreshInterval)
	n += 1 + l + sovProtocol(uint64(l))
	l = types.SizeOfStdDuration(m.Retention)
	n += 1 + l + sovProtocol(uint64(l))
	return n
}

func (m *BrokerSpec) Size() (n int) {
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovProtocol(uint64(l))
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.JournalLimit != 0 {
		n += 1 + sovProtocol(uint64(m.JournalLimit))
	}
	return n
}

func (m *BrokerSpec_ID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *Fragment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Journal)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Begin != 0 {
		n += 1 + sovProtocol(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovProtocol(uint64(m.End))
	}
	l = m.Sum.Size()
	n += 1 + l + sovProtocol(uint64(l))
	if m.CompressionCodec != 0 {
		n += 1 + sovProtocol(uint64(m.CompressionCodec))
	}
	l = len(m.BackingStore)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = types.SizeOfStdTime(m.ModTime)
	n += 1 + l + sovProtocol(uint64(l))
	return n
}

func (m *SHA1Sum) Size() (n int) {
	var l int
	_ = l
	if m.Part1 != 0 {
		n += 9
	}
	if m.Part2 != 0 {
		n += 9
	}
	if m.Part3 != 0 {
		n += 5
	}
	return n
}

func (m *ReadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Journal)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovProtocol(uint64(m.Offset))
	}
	if m.Block {
		n += 2
	}
	if m.DoNotProxy {
		n += 2
	}
	if m.MetadataOnly {
		n += 2
	}
	return n
}

func (m *ReadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProtocol(uint64(m.Status))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovProtocol(uint64(m.Offset))
	}
	if m.WriteHead != 0 {
		n += 1 + sovProtocol(uint64(m.WriteHead))
	}
	if m.Fragment != nil {
		l = m.Fragment.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.FragmentUrl)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *AppendRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Journal)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.DoNotProxy {
		n += 2
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *AppendResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProtocol(uint64(m.Status))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *ReplicateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Journal)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ContentDelta != 0 {
		n += 1 + sovProtocol(uint64(m.ContentDelta))
	}
	if m.Acknowledge {
		n += 2
	}
	return n
}

func (m *ReplicateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovProtocol(uint64(m.Status))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Fragment != nil {
		l = m.Fragment.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *Route) Size() (n int) {
	var l int
	_ = l
	if len(m.Brokers) > 0 {
		for _, e := range m.Brokers {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	if m.Primary != 0 {
		n += 1 + sovProtocol(uint64(m.Primary))
	}
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			l = len(s)
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *Header) Size() (n int) {
	var l int
	_ = l
	l = m.BrokerId.Size()
	n += 1 + l + sovProtocol(uint64(l))
	l = m.Route.Size()
	n += 1 + l + sovProtocol(uint64(l))
	l = m.Etcd.Size()
	n += 1 + l + sovProtocol(uint64(l))
	return n
}

func (m *Header_Etcd) Size() (n int) {
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovProtocol(uint64(m.ClusterId))
	}
	if m.MemberId != 0 {
		n += 1 + sovProtocol(uint64(m.MemberId))
	}
	if m.Revision != 0 {
		n += 1 + sovProtocol(uint64(m.Revision))
	}
	if m.RaftTerm != 0 {
		n += 1 + sovProtocol(uint64(m.RaftTerm))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, Label{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Include.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Exclude.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JournalSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JournalSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = Journal(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replication", wireType)
			}
			m.Replication = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replication |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LabelSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fragment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JournalSpec_Fragment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fragment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fragment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionCodec", wireType)
			}
			m.CompressionCodec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressionCodec |= (CompressionCodec(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, FragmentStore(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.RefreshInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdDurationUnmarshal(&m.Retention, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = Endpoint(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JournalLimit", wireType)
			}
			m.JournalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JournalLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerSpec_ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fragment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fragment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fragment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = Journal(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionCodec", wireType)
			}
			m.CompressionCodec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressionCodec |= (CompressionCodec(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingStore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackingStore = FragmentStore(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := types.StdTimeUnmarshal(&m.ModTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SHA1Sum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SHA1Sum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SHA1Sum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part1", wireType)
			}
			m.Part1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Part1 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part2", wireType)
			}
			m.Part2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Part2 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part3", wireType)
			}
			m.Part3 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Part3 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = Journal(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Block = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotProxy = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MetadataOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteHead", wireType)
			}
			m.WriteHead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteHead |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fragment == nil {
				m.Fragment = &Fragment{}
			}
			if err := m.Fragment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FragmentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = Journal(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotProxy = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commit == nil {
				m.Commit = &Fragment{}
			}
			if err := m.Commit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Journal = Journal(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Fragment{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentDelta", wireType)
			}
			m.ContentDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentDelta |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Acknowledge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fragment == nil {
				m.Fragment = &Fragment{}
			}
			if err := m.Fragment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brokers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brokers = append(m.Brokers, BrokerSpec_ID{})
			if err := m.Brokers[len(m.Brokers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			m.Primary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Primary |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, Endpoint(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrokerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BrokerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etcd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Etcd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header_Etcd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Etcd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Etcd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			m.MemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftTerm", wireType)
			}
			m.RaftTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protocol.proto", fileDescriptorProtocol) }

var fileDescriptorProtocol = []byte{
	// 1619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x0f, 0xf5, 0x41, 0x51, 0x4f, 0x72, 0x42, 0x0f, 0x9a, 0x54, 0xd1, 0x6e, 0x2c, 0xaf, 0xfa,
	0x01, 0x37, 0xdd, 0x28, 0x59, 0xa5, 0x68, 0x00, 0x03, 0x6d, 0x21, 0x59, 0x92, 0xcd, 0x5d, 0x5b,
	0x32, 0x46, 0x72, 0x8a, 0xec, 0x85, 0xa0, 0xc8, 0x91, 0xcc, 0x9a, 0xe4, 0xa8, 0xe4, 0x28, 0x89,
	0xdb, 0x7b, 0x4f, 0x3d, 0x2c, 0xd0, 0x43, 0x7b, 0x28, 0xd0, 0xf6, 0xaf, 0xe8, 0xa5, 0xe7, 0x62,
	0xd1, 0x53, 0x80, 0xde, 0xdd, 0x22, 0x87, 0xa2, 0xe7, 0xa0, 0xa7, 0x9c, 0x8a, 0x19, 0x0e, 0x25,
	0x5a, 0xb6, 0xe3, 0xbd, 0xf8, 0x36, 0xf3, 0xde, 0xef, 0xbd, 0x79, 0xdf, 0x6f, 0xe0, 0xf6, 0x2c,
	0xa4, 0x8c, 0xda, 0xd4, 0x6b, 0x88, 0x03, 0xd2, 0x92, 0x7b, 0xf5, 0xd1, 0xd4, 0x65, 0xc7, 0xf3,
	0x71, 0xc3, 0xa6, 0xfe, 0xe3, 0x29, 0x9d, 0xd2, 0xc7, 0x82, 0x33, 0x9e, 0x4f, 0xc4, 0x4d, 0x5c,
	0xc4, 0x29, 0x16, 0xac, 0x6e, 0x4c, 0x29, 0x9d, 0x7a, 0x64, 0x89, 0x72, 0xe6, 0xa1, 0xc5, 0x5c,
	0x1a, 0x48, 0x7e, 0x6d, 0x95, 0xcf, 0x5c, 0x9f, 0x44, 0xcc, 0xf2, 0x67, 0x31, 0xa0, 0xfe, 0x0c,
	0xf2, 0xfb, 0xd6, 0x98, 0x78, 0x08, 0x41, 0x2e, 0xb0, 0x7c, 0x52, 0x51, 0x36, 0x95, 0xad, 0x22,
	0x16, 0x67, 0xf4, 0x2d, 0xc8, 0xbf, 0xb4, 0xbc, 0x39, 0xa9, 0x64, 0x04, 0x31, 0xbe, 0x6c, 0xe7,
	0xde, 0xfc, 0xa5, 0x76, 0xab, 0xde, 0x07, 0x4d, 0x08, 0x0e, 0x09, 0x43, 0x6d, 0x50, 0x3d, 0x7e,
	0x8e, 0x2a, 0xca, 0x66, 0x76, 0xab, 0xd4, 0xbc, 0xd3, 0x58, 0xf8, 0x27, 0x30, 0xed, 0xfb, 0x5f,
	0x9f, 0xd5, 0x6e, 0xbd, 0x3b, 0xab, 0xad, 0x9f, 0x5a, 0xbe, 0xb7, 0x5d, 0xff, 0x94, 0xfa, 0x2e,
	0x23, 0xfe, 0x8c, 0x9d, 0xd6, 0xb1, 0x94, 0xac, 0xbf, 0x82, 0x35, 0xa9, 0xcf, 0x23, 0x36, 0xa3,
	0x21, 0x6a, 0x42, 0xc1, 0x0d, 0x6c, 0x6f, 0xee, 0xc4, 0x36, 0x95, 0x9a, 0x68, 0x45, 0xeb, 0x90,
	0xb0, 0x76, 0x8e, 0x2b, 0xc6, 0x09, 0x90, 0xcb, 0x90, 0xd7, 0xb1, 0x4c, 0xe6, 0x3a, 0x19, 0x09,
	0xac, 0xff, 0x4e, 0x85, 0xd2, 0xe7, 0x74, 0x1e, 0x06, 0x96, 0x37, 0x9c, 0x11, 0x1b, 0xfd, 0x28,
	0x1d, 0x88, 0xf6, 0xe6, 0xa5, 0x56, 0xbf, 0x3f, 0xab, 0x15, 0xa4, 0x8c, 0x0c, 0xd5, 0x33, 0x28,
	0x85, 0x64, 0xe6, 0xb9, 0xb6, 0x88, 0xbe, 0x78, 0x3d, 0xdf, 0xbe, 0x7b, 0xb9, 0xcb, 0x69, 0x24,
	0x3a, 0x5c, 0xc4, 0x2e, 0x7b, 0xa5, 0xc5, 0xdf, 0xe5, 0x16, 0xbf, 0x39, 0xab, 0x29, 0xef, 0xce,
	0x6a, 0x95, 0x55, 0x7d, 0x9f, 0xba, 0x81, 0xe7, 0x06, 0x64, 0x11, 0x49, 0x74, 0x04, 0xda, 0x24,
	0xb4, 0xa6, 0x3e, 0x09, 0x58, 0x25, 0x27, 0x74, 0x6e, 0x2c, 0x75, 0xa6, 0x3c, 0x6d, 0xf4, 0x24,
	0xea, 0x43, 0xe9, 0x59, 0xa8, 0x42, 0x4d, 0x28, 0x86, 0xc4, 0x72, 0x4c, 0x1a, 0x78, 0xa7, 0x15,
	0x75, 0x53, 0xd9, 0xd2, 0xae, 0xf2, 0x4f, 0xe3, 0xb8, 0x41, 0xe0, 0x9d, 0x56, 0xff, 0x9a, 0x05,
	0x2d, 0x79, 0x05, 0x3d, 0x02, 0xd5, 0x23, 0xc1, 0x94, 0x1d, 0x8b, 0xd0, 0x66, 0xaf, 0x92, 0x96,
	0x20, 0x44, 0x61, 0xdd, 0xa6, 0xfe, 0x2c, 0x24, 0x51, 0xe4, 0xd2, 0xc0, 0xb4, 0xa9, 0x43, 0x6c,
	0x11, 0xd7, 0xdb, 0xcd, 0xea, 0xd2, 0x9f, 0x9d, 0x25, 0x64, 0x87, 0x23, 0xda, 0xdf, 0x7f, 0x77,
	0x56, 0xab, 0xc7, 0x5a, 0x2f, 0x88, 0xa7, 0x9f, 0xd1, 0xed, 0x15, 0x49, 0xf4, 0x53, 0x50, 0x23,
	0x46, 0x43, 0xc2, 0x33, 0x91, 0xdd, 0x2a, 0x0a, 0x4d, 0x97, 0xa6, 0x7e, 0x2d, 0x71, 0x69, 0xc8,
	0xe1, 0x58, 0x4a, 0xa1, 0x08, 0xf4, 0x90, 0x4c, 0x42, 0x12, 0x1d, 0x9b, 0x6e, 0xc0, 0x48, 0xf8,
	0xd2, 0xf2, 0x64, 0xfc, 0xef, 0x37, 0xe2, 0x36, 0x6c, 0x24, 0x6d, 0xd8, 0xe8, 0xc8, 0x36, 0x6d,
	0x3f, 0x92, 0xa1, 0xff, 0x24, 0x7e, 0x68, 0x55, 0x41, 0xea, 0xe1, 0x3f, 0xfc, 0xab, 0xa6, 0xe0,
	0x3b, 0x12, 0x60, 0x48, 0x3e, 0x7a, 0xce, 0xb3, 0xc2, 0x48, 0x20, 0xaa, 0x2e, 0x7f, 0xdd, 0x6b,
	0x0f, 0xae, 0x4c, 0xb4, 0xd0, 0xbe, 0x54, 0x55, 0xff, 0x9b, 0x02, 0xd0, 0x0e, 0xe9, 0x09, 0x09,
	0x45, 0x53, 0x3c, 0x82, 0x8c, 0xeb, 0xc8, 0x3e, 0xfc, 0xf6, 0x32, 0xfa, 0x4b, 0x44, 0xc3, 0xe8,
	0xc8, 0xc6, 0xca, 0xb8, 0x0e, 0xda, 0x02, 0x8d, 0x04, 0xce, 0x8c, 0xba, 0x01, 0x8b, 0x67, 0x47,
	0xbb, 0xfc, 0xfe, 0xac, 0xa6, 0x75, 0x25, 0x0d, 0x2f, 0xb8, 0xe8, 0x3b, 0xb0, 0xf6, 0x8b, 0xb8,
	0x24, 0x4d, 0xcf, 0xf5, 0x5d, 0x26, 0xba, 0x60, 0x0d, 0x97, 0x25, 0x71, 0x9f, 0xd3, 0xaa, 0x4f,
	0x20, 0x63, 0x74, 0xf8, 0x84, 0xfa, 0x15, 0x0d, 0x16, 0x13, 0x8a, 0x9f, 0xd1, 0x3d, 0x50, 0xa3,
	0xf9, 0x64, 0xe2, 0xbe, 0x96, 0x23, 0x4a, 0xde, 0xea, 0x7f, 0xcf, 0xa4, 0x0a, 0xef, 0x7b, 0x50,
	0x90, 0xea, 0x64, 0x53, 0x97, 0xd2, 0xfd, 0x9b, 0xf0, 0xf8, 0xb4, 0x1b, 0x93, 0xa9, 0x1b, 0x37,
	0x6f, 0x16, 0xc7, 0x17, 0xa4, 0x43, 0x96, 0x04, 0x8e, 0x30, 0x2b, 0x8b, 0xf9, 0x11, 0xfd, 0x00,
	0xb2, 0xd1, 0xdc, 0x97, 0xa9, 0x5d, 0x5f, 0x06, 0x63, 0xb8, 0xd7, 0xfa, 0x6c, 0x38, 0xf7, 0x65,
	0x18, 0x38, 0x06, 0xed, 0x5e, 0x56, 0xc3, 0xf9, 0xeb, 0x6a, 0xf8, 0x92, 0xda, 0xfc, 0x31, 0xac,
	0x8d, 0x2d, 0xfb, 0xc4, 0x0d, 0xa6, 0xa6, 0xa8, 0x36, 0xd1, 0x80, 0xc5, 0xf6, 0xfa, 0xc5, 0x6a,
	0x2c, 0x4b, 0x9c, 0xb8, 0xa1, 0x9f, 0x81, 0xe6, 0x53, 0xc7, 0xe4, 0x53, 0xbf, 0x52, 0x10, 0x06,
	0x57, 0x2f, 0x54, 0xc7, 0x28, 0x59, 0x09, 0x6d, 0x8d, 0x5b, 0xfe, 0x15, 0xaf, 0x84, 0x82, 0x4f,
	0x1d, 0x4e, 0xaf, 0x1f, 0x41, 0x41, 0xfa, 0xc5, 0xe3, 0x33, 0xb3, 0x42, 0xf6, 0x99, 0x08, 0xa2,
	0x8a, 0xe3, 0x4b, 0x42, 0x6d, 0x8a, 0xa8, 0x49, 0x6a, 0x33, 0xa1, 0x3e, 0x15, 0x71, 0x2b, 0xc4,
	0xd4, 0xa7, 0xdb, 0xda, 0x7f, 0xff, 0x5c, 0x53, 0xc4, 0xf6, 0xf8, 0xa7, 0x02, 0x25, 0x4c, 0x2c,
	0x07, 0x93, 0x5f, 0xce, 0x49, 0xc4, 0xd0, 0x16, 0xa8, 0xc7, 0xc4, 0x72, 0x48, 0x28, 0x6b, 0x4c,
	0x5f, 0x46, 0x67, 0x4f, 0xd0, 0xb1, 0xe4, 0xa7, 0x93, 0x99, 0xf9, 0x40, 0x32, 0xef, 0x81, 0x4a,
	0x27, 0x93, 0x88, 0x30, 0x99, 0x39, 0x79, 0x13, 0x49, 0xf6, 0xa8, 0x7d, 0x22, 0xd2, 0xa7, 0xe1,
	0xf8, 0x82, 0x36, 0xa1, 0xec, 0x50, 0x33, 0xa0, 0xcc, 0x9c, 0x85, 0xf4, 0xf5, 0xa9, 0x48, 0x91,
	0x86, 0xc1, 0xa1, 0x7d, 0xca, 0x0e, 0x39, 0x85, 0xd7, 0xa9, 0x4f, 0x98, 0xe5, 0x58, 0xcc, 0x4a,
	0x4d, 0x40, 0x5c, 0x4e, 0x88, 0x7c, 0xdc, 0xd5, 0x7f, 0x93, 0x81, 0x72, 0xec, 0x55, 0x34, 0xa3,
	0x41, 0x44, 0xb8, 0x5b, 0x11, 0xb3, 0xd8, 0x3c, 0x12, 0x6e, 0xdd, 0x4e, 0xbb, 0x35, 0x14, 0x74,
	0x2c, 0xf9, 0xa9, 0x00, 0x64, 0xae, 0x09, 0xc0, 0x55, 0x9e, 0x3d, 0x00, 0x78, 0x15, 0xba, 0x8c,
	0x98, 0x1c, 0x27, 0xdc, 0xcb, 0xe2, 0xa2, 0xa0, 0x70, 0x05, 0xa8, 0x91, 0xda, 0x0a, 0xf9, 0xd5,
	0x4d, 0x93, 0x94, 0x50, 0x6a, 0xdc, 0x7f, 0x02, 0xe5, 0xe4, 0x6c, 0xce, 0x43, 0x2f, 0x2e, 0x38,
	0x5c, 0x4a, 0x68, 0x47, 0xa1, 0x87, 0x2a, 0x50, 0xb0, 0x69, 0xc0, 0x27, 0x86, 0xa8, 0xad, 0x32,
	0x4e, 0xae, 0xf5, 0x3f, 0x2a, 0xb0, 0xd6, 0x9a, 0xcd, 0x48, 0x70, 0x73, 0x09, 0x5e, 0x4d, 0x59,
	0xf6, 0x42, 0xca, 0x52, 0xe6, 0xe5, 0xce, 0x9b, 0xf7, 0x95, 0x02, 0xb7, 0x13, 0xf3, 0x6e, 0x30,
	0x53, 0x0f, 0x41, 0xb5, 0xa9, 0x9f, 0x0c, 0xb5, 0xcb, 0x03, 0x2e, 0x11, 0xf5, 0xff, 0x29, 0xa0,
	0x63, 0xf9, 0x2d, 0x20, 0x37, 0x16, 0xb4, 0x06, 0xf0, 0x9f, 0xe6, 0x8c, 0x46, 0x96, 0xf7, 0x01,
	0x9b, 0x16, 0x98, 0xab, 0x43, 0xc8, 0xfb, 0x41, 0x1e, 0x4d, 0x87, 0x78, 0xcc, 0x12, 0x35, 0x95,
	0xc5, 0x65, 0x49, 0xec, 0x70, 0x1a, 0xda, 0x84, 0x92, 0x65, 0x9f, 0x04, 0xf4, 0x95, 0x47, 0x9c,
	0x29, 0x91, 0x2d, 0x93, 0x26, 0xd5, 0x7f, 0xaf, 0xc0, 0x7a, 0xca, 0xed, 0x1b, 0x4c, 0x46, 0xba,
	0xfe, 0xb3, 0xd7, 0xd7, 0x7f, 0xfd, 0xb7, 0x0a, 0xe4, 0x31, 0x9d, 0x33, 0xfe, 0xb5, 0x2b, 0x8c,
	0xc5, 0x9e, 0x4b, 0xbe, 0xb7, 0xd7, 0x2c, 0xc0, 0x04, 0xcd, 0xa3, 0x37, 0x0b, 0x5d, 0xdf, 0x0a,
	0x4f, 0xe3, 0xff, 0x20, 0x4e, 0xae, 0xe8, 0x21, 0x14, 0x93, 0x0d, 0x98, 0xfc, 0x36, 0xce, 0x2f,
	0xc8, 0x25, 0x5b, 0x7e, 0xb7, 0xff, 0x94, 0x01, 0x35, 0xf6, 0x08, 0x6d, 0x43, 0x31, 0x7e, 0xc1,
	0xfc, 0xa6, 0x2b, 0x59, 0x8b, 0xf1, 0x86, 0x83, 0x7e, 0x08, 0xf9, 0x90, 0x3b, 0x25, 0xc3, 0x95,
	0xfa, 0xa8, 0x0b, 0x5f, 0x25, 0x3e, 0xc6, 0xa0, 0xc7, 0x90, 0x23, 0xcc, 0x76, 0x64, 0xb8, 0xee,
	0xae, 0x86, 0xb6, 0xd1, 0x65, 0xb6, 0x23, 0x25, 0x04, 0xb0, 0xfa, 0x6b, 0xc8, 0x71, 0x1a, 0x1f,
	0x45, 0xb6, 0x37, 0x8f, 0xd8, 0xd2, 0xc4, 0x1c, 0x2e, 0x4a, 0x8a, 0xe1, 0xa0, 0x8f, 0xa0, 0xe8,
	0x13, 0x7f, 0x1c, 0x73, 0x33, 0x82, 0xab, 0xc5, 0x04, 0xc3, 0x41, 0x55, 0xd0, 0x42, 0xf2, 0xd2,
	0xe5, 0xab, 0x4f, 0x0e, 0xb8, 0xc5, 0x9d, 0x0b, 0x86, 0xd6, 0x84, 0x99, 0x8c, 0x84, 0xf1, 0xfe,
	0xcd, 0x61, 0x8d, 0x13, 0x46, 0x24, 0xf4, 0x1f, 0xfe, 0x47, 0x01, 0x35, 0xae, 0x0e, 0xa4, 0x42,
	0x66, 0xf0, 0x85, 0x7e, 0x0b, 0xdd, 0x85, 0xf5, 0xcf, 0x07, 0x47, 0xb8, 0xdf, 0xda, 0x37, 0xfb,
	0x83, 0x91, 0xd9, 0x1b, 0x1c, 0xf5, 0x3b, 0xba, 0x82, 0x1e, 0xc0, 0xfd, 0xfe, 0xc0, 0x4c, 0x38,
	0x87, 0xd8, 0x38, 0x68, 0xe1, 0x17, 0x66, 0x1b, 0x0f, 0xbe, 0xe8, 0x62, 0x3d, 0x83, 0x36, 0xa0,
	0xca, 0xd1, 0x57, 0xf0, 0xb3, 0xe8, 0x1e, 0xa0, 0x34, 0x5f, 0xd2, 0xf3, 0x68, 0x13, 0x3e, 0x36,
	0xfa, 0xc3, 0xa3, 0x5e, 0xcf, 0xd8, 0x31, 0xba, 0xfd, 0x55, 0xc0, 0x50, 0xcf, 0xa1, 0x8f, 0xa1,
	0x32, 0xe8, 0xf5, 0x86, 0xdd, 0x91, 0x30, 0xe7, 0x45, 0x77, 0x64, 0xb6, 0x9e, 0xb7, 0x8c, 0xfd,
	0x56, 0x7b, 0xbf, 0xab, 0xab, 0xe8, 0x0e, 0x94, 0x7e, 0x8e, 0x07, 0xfd, 0x5d, 0x13, 0x0f, 0x8e,
	0x46, 0x5d, 0xbd, 0xc0, 0xcd, 0xef, 0xe1, 0xd6, 0xee, 0x01, 0x57, 0x76, 0x60, 0x0c, 0x0f, 0x5a,
	0xa3, 0x9d, 0x3d, 0x5d, 0x7b, 0x18, 0x80, 0xbe, 0xfa, 0x63, 0x40, 0x25, 0x28, 0x18, 0xfd, 0xe7,
	0xad, 0x7d, 0xa3, 0xa3, 0xdf, 0x42, 0x1a, 0xe4, 0xfa, 0x83, 0x7e, 0x57, 0x57, 0xf8, 0x69, 0xf7,
	0x4b, 0xe3, 0x50, 0xcf, 0xa0, 0x35, 0x28, 0x7e, 0x39, 0x1c, 0xb5, 0xfa, 0x9d, 0x16, 0xee, 0xe8,
	0x59, 0x04, 0xa0, 0x0e, 0xfb, 0xad, 0xc3, 0xc3, 0x17, 0x7a, 0x8e, 0xfb, 0xcb, 0x41, 0xe6, 0xa0,
	0xd7, 0xdb, 0x1f, 0xb4, 0x3a, 0x66, 0xa7, 0xbb, 0x33, 0x38, 0x38, 0xc4, 0xdd, 0xe1, 0xd0, 0x18,
	0xf4, 0xf5, 0x7c, 0xf3, 0x1f, 0x0a, 0xa8, 0x71, 0x55, 0xa1, 0x67, 0x90, 0xe3, 0xfb, 0x0d, 0xa5,
	0x6a, 0x21, 0xb5, 0xc5, 0xab, 0xf7, 0x56, 0xc9, 0x71, 0x3f, 0x3f, 0x51, 0xd0, 0x4f, 0x40, 0x8d,
	0x07, 0x2e, 0x4a, 0x95, 0xea, 0xb9, 0x0d, 0x51, 0xad, 0x5c, 0x64, 0xc4, 0xe2, 0x5b, 0x0a, 0xda,
	0x83, 0xe2, 0x62, 0x4a, 0xa0, 0x6a, 0xfa, 0x95, 0xf3, 0x13, 0xb3, 0xfa, 0xd1, 0xa5, 0xbc, 0x44,
	0xcf, 0x13, 0xa5, 0x5d, 0xfe, 0xfa, 0xed, 0x86, 0xf2, 0xe6, 0xed, 0x86, 0xf2, 0xef, 0xb7, 0x1b,
	0xca, 0x58, 0x15, 0xe8, 0xa7, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x52, 0x77, 0x45, 0x90,
	0x0f, 0x00, 0x00,
}
